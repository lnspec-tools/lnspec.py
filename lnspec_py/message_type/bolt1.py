# code generated by the lncodegen.rs please do not edit

import logging
from lnspec_py.basic_type.int import U16Int, U32Int
from lnspec_py.basic_type.bitmask import Bitfield
from lnspec_py.basic_type.tvl_record import TVLRecord


class InitMsg:
    def __init__(self, msg_type, gflen, globalfeatures, flen, features, init_tlvs):
        self.msg_type = msg_type
        self.gflen = gflen
        self.globalfeatures = globalfeatures
        self.flen = flen
        self.features = features
        self.init_tlvs = init_tlvs

    # close scope

    def encode(self) -> str:
        raw_msg = ""
        raw_msg += "{}".format(self.msg_type.encode())
        raw_msg += "{}".format(self.gflen.encode())
        if len(self.globalfeatures.bitfield) > 0:
            raw_msg += Bitfield.encode(self.globalfeatures.bitfield)
        raw_msg += "{}".format(self.flen.encode())
        if len(self.features.bitfield) > 0:
            raw_msg += Bitfield.encode(self.features.bitfield)
        raw_msg += self.init_tlvs.encode()
        return raw_msg

    # close scope

    @staticmethod
    def decode(raw_msg: str):
        msg_type, raw_msg = U16Int.decode_with_hex_str(raw_msg)
        gflen, raw_msg = U16Int.decode_with_hex_str(raw_msg)
        globalfeatures, raw_msg = Bitfield.decode_with_len(raw_msg)
        flen, raw_msg = U16Int.decode_with_hex_str(raw_msg)
        features, raw_msg = Bitfield.decode_with_len(raw_msg)
        init_tlvs = TVLRecord(raw_msg)
        init_tlvs.decode()
        return InitMsg(msg_type, gflen, globalfeatures, flen, features, init_tlvs)

    # close scope


# close scope
# close scope
